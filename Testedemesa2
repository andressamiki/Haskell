listaapolex2 :: [String]
listaapolex2 = ["A" ++ [x] ++ "BB"| x<-["a".."g"]]

listaapolex2 = ["A" ++ [x] ++ "BB" | x<-["a","b","c","d","e","f","g"]]

["A" ++ a ++ "BB","A" ++ b ++ "BB","A" ++ c ++ "BB","A" ++ d ++ "BB",
"A" ++ e ++ "BB","A" ++ f ++ "BB","A" ++ g ++ "BB"]

["AaBB", "AbBB", "AcBB", "AdBB", "AeBB", "AfBB", "AgBB"]

--------------------------------------------------------------------------------
listaapolex3 :: [Int]
listaapolex3 = [(x*3) + 2 | x<-[1..13] , x /= 4, x/=7, x/=11]

listaapolex3 = [(x*3) + 2 | x<-[1,2,3,5,6,8,9,10,12,13] , x /= 4, x/=7, x/=11]
[(1*3) + 2,(2*3) + 2,(3*3) + 2,(5*3) + 2,(6*3) + 2,(8*3) + 2,(9*3) + 2,(10*3) + 2,(12*3) + 2,(13*3)]

[3+2, 6+2 , 9+2 , 15+2 , 18+2 , 24+2 , 27+2 , 30+2 , 36+2 , 39+2]

[5,8,11,17,20,26,29,32,38,41]
--------------------------------------------------------------------------------

listaapolex4 :: [Float]
listaapolex4 = [1/(2^x)|x<-[0..5]]

listaapolex4 = [1/(2^x)|x<-[0,1,2,3,4,5]]

[1/(2^0), 1/(2^1),1/(2^2),1/(2^3),1/(2^4),1/(2^5)]
[1/1,1/2,1/4,1/8,1/16,1/32]

[1.0,0.5,0.25,0.125,0.0625,0.03125]

--------------------------------------------------------------------------------

listaapolex5 :: [Int]
listaapolex5 = [(x*9) + 1 |x<-[0..7]]

listaapolex5 = [(x*9) + 1 |x<-[0,1,2,3,4,5,6,7]]

[(0*9)+1 , (1*9) + 1 , (2*9) + 1 , (3*9) + 1 , (4*9) + 1 , (5*9) + 1,(6*9) + 1, (7*9) + 1]

[0+1 , 9+1 , 18+1 , 27+1 , 36+1 , 45+1 , 54+1, 63+1 ]

[1,10,19,28,37,46,55,64]

--------------------------------------------------------------------------------

listaapolex6 :: [Int]
listaapolex6 = [x*2 |x<-[1..15], x /= 3, x/=7,x/=10,x/=13]

[1*2 , 2*2, 3*2, 4*2, 5*2, 6*2, 7*2, 8*2, 9*2, 10*2, 11*2, 12*2, 13*2, 14*2, 15*2]

[2,4,8,10,12,16,18,22,24,28,30]

--------------------------------------------------------------------------------

listaapolex7 :: [Char]
listaapolex7 = [x|x<-['@'..'L'],  notElem x "BFHIK"]

listaapolex7 = [x|x<-['@','A','C','D','E','G','J','L'],  notElem x "BFHIK"]
[’@’,’A’,’C’,’D’,’E’,’G’,’J’,’L’]

--------------------------------------------------------------------------------

--Ex 2.4
ex4 :: String -> Bool
ex4 x = length x `mod` 2 == 0

// teste : ex4 "gato"

ex4 gato = length gato `mod` 2 == 0
ex4 gato = length 4 `mod` 2 == 0
4 `mod` 2 == 0
True

--------------------------------------------------------------------------------
--Ex 2.5
ex5 :: [String] -> [String]
ex5 x = [reverse y | y <- x]

/ teste: --ex5 ["Ola","dois"]
ex5 ["Ola","dois"] = [reverse y | y <- ["Ola","dois"]]
[reverse "Ola",reverse "dois"]
[reverse "alO",reverse "siod"]
["alO","siod"]

-------------------------------------------------------------------------------
ex6 :: [String] -> [Int]
ex6 x = [length y | y <- x, (mod (length y) 2) == 1]
-- teste: ex6 ["oi","134","hello","12345"]

ex6 ["oi","134","hello"] = [length y | y <-["oi","134","hello"], (mod (length y) 2) == 1]
[length "oi" ,length "134", length "hello"]
[length 2 ,length 3, length 5,]
[length 2 | y <-["oi"], (mod (length 2) 2) == 1] 
[length 3 | y <-["134"], (mod (length 2) 2) == 1] 
[length 5 | y <-["hello"], (mod (length 2) 2) == 1] 
[3,5,5]

